### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AccessToken {
  accessToken: String
  item_id: String
  request_id: String
}

type Account {
  Transactions: [Transaction!]
  User: User
  available: Float
  current: Float
  id: Int!
  isoCurrencyCode: String
  limit: Float
  mask: String
  name: String!
  officialName: String
  plaidId: String
  subtype: String
  type: String
  unofficialCurrencyCode: String
  userId: Int
}

"""For anything to not lock yourself in strict types"""
scalar Any

type Category {
  Transactions: [Transaction!]
  User: User
  colour: String
  description: String
  id: Int!
  name: String!
  userId: Int
}

type Counterparty {
  confidence_level: String
  entity_id: String
  logo_url: String
  name: String
  type: String
  website: String
}

"""For representing data in ISO format"""
scalar Date

type Document {
  key: String!
  name: String
  size: Int!
  uid: String!
}

enum InOrOutEnum {
  IN
  OUT
}

type Item {
  auth_method: String
  available_products: [String]
  billed_products: [String]
  consent_expiration_time: String
  error: String
  institution_id: String
  institution_name: String
  item_id: String
  update_type: String
  webhook: String
}

type LinkToken {
  expiration: String
  link_token: String
  request_id: String
}

type Location {
  address: String
  city: String
  country: String
  lat: Float
  lon: Float
  postal_code: String
  region: String
  store_number: String
}

type Mutation {
  analyseSinglePdfWithAI(pdfKey: String!): Any
  categoriseTransactionsWithAi(ids: [Int!]!, overwrite: Boolean): [Transaction]!
  createAccount(available: Float!, current: Float!, isoCurrencyCode: String, limit: Float, mask: String, name: String!, officialName: String, plaidId: String!, subtype: String, type: String!, unofficialCurrencyCode: String, userId: Int!): Account!
  createCategory(description: String, name: String!, userId: Int!): Category!
  createLinkToken: LinkToken
  createTransaction(accountId: Int, amount: Float!, date: Int!, merchantName: String!, name: String, plaidId: String!, userId: Int!): Transaction!
  createUser(email: String!, firstName: String, lastName: String, phone: String, uid: String!, username: String!): User!
  deleteAccount(id: Int!): Account!
  deleteAllDocumentsAssociatedWithUserInBucketByUid(uid: String!): Boolean
  deleteCategory(id: Int!): Category!
  deleteDocumentByKey(documentKey: String!): Boolean
  deleteTransaction(id: Int!): Transaction
  deleteUser(id: Int!): User!
  exchangePublicToken(public_token: String!, userId: Int!): String!
  updateCategory(colour: String, description: String, id: Int!, name: String): Category!
  updateProfilePhoto(userId: Int!): String!
  updateTransaction(categoryId: Int, id: Int!, merchantName: String, name: String): Transaction
  updateTransactions(categoryId: Int, ids: [Int!]!): [Transaction!]!
  updateUserDetails(email: String!, firstName: String, id: Int!, lastName: String, phone: String, uid: String!, username: String!): User!
  uploadPdf(file: String!, name: String!, size: Int!, uid: String!): Any
  upsertAccountsFromPlaid(accessToken: String!, userId: Int!): [Account!]!
  upsertTransactionsFromPlaid(accessToken: String!, accountId: Int, endDate: String!, startDate: String!, userId: Int): [Transaction!]!
}

type PaymentMeta {
  by_order_of: String
  payee: String
  payer: String
  payment_method: String
  payment_processor: String
  ppd_id: String
  reason: String
  reference_number: String
}

type PersonalFinanceCategory {
  confidence_level: String
  detailed: String
  primary: String
}

type Query {
  allTransactions: [Transaction!]!
  getALLPDFURLBelongingToUserByUid(uid: String!): [String!]!
  getAccountsByUserId(userId: Int!): [Account!]!
  getAllAccounts: [Account!]!
  getAllPdfBelongingToUserByUid(uid: String!): [Document!]!
  getAllPdfBuffersByUid(uid: String!): [Any!]
  getAllUsers: [User!]!
  getCategoriesByUserId(userId: Int!): [Category!]!
  getCategoryById(id: Int!): Category!
  getPdfUrlByKey(key: String!): Any
  getTransactionById(id: Int!): Transaction!
  getTransactionsByUserId(userId: Int!): [Transaction!]!
  getUserById(userId: Int!): User
  getUserByUid(uid: String!): User!
  usernameExists(username: String!): Boolean
}

type Transaction {
  Account: Account
  Category: Category
  User: User
  accountId: Int
  amount: Float!
  categoryId: Int
  date: Int!
  id: Int!
  io: InOrOutEnum
  merchantName: String
  name: String
  plaidId: String
  userId: Int
}

type TransactionRes {
  accounts: [Account]
  item: Item
  request_id: String
  total_transactions: Int
  transactions: [Transaction]
}

type User {
  Accounts: [Account!]
  Transactions: [Transaction!]
  accessToken: String
  email: String!
  firstName: String
  id: Int!
  lastName: String
  phone: String
  uid: String!
  username: String!
}

type s3Object {
  contentType: String
  file: String!
  key: String!
  lastModified: String
  name: String!
  size: Int!
  uid: String!
}