### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AccessToken {
  accessToken: String
  item_id: String
  request_id: String
}

type Account {
  balances: Balances!
  balancesId: Int!
  id: String!
  mask: String
  name: String!
  officialName: String
  subtype: String
  type: String!
}

"""For anything to not lock yourself in strict types"""
scalar Any

type Balances {
  available: Float
  current: Float
  id: Int!
  iso_currency_code: String
  limit: Float
  unofficial_currency_code: String
}

type Counterparty {
  confidence_level: String
  entity_id: String
  logo_url: String
  name: String
  type: String
  website: String
}

"""For representing data in ISO format"""
scalar Date

enum InOrOutEnum {
  IN
  OUT
}

type Item {
  auth_method: String
  available_products: [String]
  billed_products: [String]
  consent_expiration_time: String
  error: String
  institution_id: String
  institution_name: String
  item_id: String
  update_type: String
  webhook: String
}

type LinkToken {
  expiration: String
  link_token: String
  request_id: String
}

type Location {
  address: String
  city: String
  country: String
  lat: Float
  lon: Float
  postal_code: String
  region: String
  store_number: String
}

type Mutation {
  createAccount(balancesId: Int!, mask: String, name: String!, officialName: String, subType: String, subtype: String, type: String!): Account!
  createBalances(available: Float!, current: Float!, isoCurrencyCode: String, limit: Float, unofficialCurrencyCode: String): Balances
  createLinkToken: LinkToken
  createTransaction(accountId: Int!, amount: Float!, category: String, date: Int!, merchantName: String!, name: String, userId: Int!): Transaction!
  createUser(email: String!, firstName: String, lastName: String, password: String, phone: String, uid: String!, username: String!): User!
  deleteTransaction(id: Int!): Transaction
  deleteUser(id: Int!): User!
  emailSignIn(password: String!, username: String!): User!
  exchangePublicToken(public_token: String!, userId: String!): AccessToken
  updateUserDetails(email: String!, firstName: String, id: Int!, lastName: String, password: String, phone: String, uid: String!, username: String!): User!
  upsertAccount(access_token: String!): Any
  upsertTransactions(access_token: String!, accountId: Int, end_date: String!, start_date: String!, userId: Int!): [Transaction!]!
}

type PaymentMeta {
  by_order_of: String
  payee: String
  payer: String
  payment_method: String
  payment_processor: String
  ppd_id: String
  reason: String
  reference_number: String
}

type PersonalFinanceCategory {
  confidence_level: String
  detailed: String
  primary: String
}

type Query {
  allTransactions: [Transaction!]!
  fetchAccessTokenFromUser(userId: Int!): AccessToken
  getTransactionById(id: Int!): Transaction!
  getTransactionsByUserId(userId: Int!): [Transaction!]!
  user(uid: String!): User!
  users: [User!]!
}

type Transaction {
  Account: Account
  User: User!
  accountId: Int
  amount: Float!
  category: String
  date: Int!
  id: Int!
  io: InOrOutEnum
  merchantName: String!
  name: String
  plaidId: String!
  userId: Int!
}

type TransactionRes {
  accounts: [Account]
  item: Item
  request_id: String
  total_transactions: Int
  transactions: [Transaction]
}

type User {
  email: String!
  firstName: String
  id: Int!
  lastName: String
  password: String
  phone: String
  transactions: [Transaction!]
  uid: String!
  username: String!
}