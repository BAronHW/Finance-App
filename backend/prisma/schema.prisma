// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  firstName    String?
  lastName     String?
  username     String        @unique
  email        String        @unique
  password     String?
  uid          String        @unique
  phone        String?
  Transactions Transaction[]
  Accounts     Account[]
  Categories   Category[]
  AccessToken  String?
  Document     Document[]
}

model Transaction {
  id           Int       @id @default(autoincrement())
  userId       Int?
  User         User?     @relation(fields: [userId], references: [id])
  accountId    Int?
  Account      Account?  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  name         String?
  merchantName String
  amount       Float
  date         Int       @default(0)
  Category     Category? @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  plaidId      String    @unique
}

model Document {
  id          Int           @id @default(autoincrement())
  key         String        @unique
  size        Int
  name        String?
  user        User          @relation(fields: [uid], references: [uid])
  uid         String
  Account     Account[]
  MergedTable MergedTable[]
}

model MergedTable {
  id                 Int      @id @default(autoincrement())
  document           Document @relation(fields: [documentKey], references: [key])
  documentKey        String
  mergedTableContent Json
}

model Account {
  id                     Int           @id @default(autoincrement())
  Transactions           Transaction[]
  mask                   String?
  name                   String
  officialName           String?
  type                   String
  subtype                String?
  User                   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 Int
  plaidId                String        @unique
  available              Float?
  current                Float?
  isoCurrencyCode        String?
  unofficialCurrencyCode String?
  limit                  Float?
  Document               Document?     @relation(fields: [documentKey], references: [key])
  documentKey            String?
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String
  User         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  description  String?
  colour       String        @default("#ffffff")
  Transactions Transaction[]
}

enum InOrOut {
  IN
  OUT
}
